# -*- coding: utf-8 -*-
"""app_irap.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JEKSXjXKZZEQBLZgSqJpAYip8z7xFIWe
"""

import streamlit as st
import pandas as pd
import geopandas as gpd
import folium
from shapely import wkt
from shapely.geometry import box
from streamlit_folium import folium_static

# -------------------- Step 1: Upload and Load Data --------------------

st.set_page_config(layout="wide")  # Set the page to wide mode
st.title("Road KSI Map - Essex")

uploaded_file = st.file_uploader("Upload CSV file", type=["csv"])

def load_data(file):
    try:
        df = pd.read_csv(file)
        df['geometry'] = df['geometry'].apply(wkt.loads)
        df['Road Number'] = df['Road Number'].fillna("Unknown").astype(str)  # Ensure Road Number is valid
        df['speed_limit'] = df['speed_limit'].fillna(0).astype(int)  # Convert speed limit to integer
        return gpd.GeoDataFrame(df, geometry='geometry')
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return gpd.GeoDataFrame()

if uploaded_file:
    gdf = load_data(uploaded_file)
else:
    st.warning("Please upload a CSV file to proceed.")
    st.stop()

# -------------------- Step 2: Coordinate Transformation --------------------

gdf.set_crs("EPSG:32631", inplace=True)
gdf = gdf.to_crs("EPSG:4326")

# -------------------- Step 3: Define Essex Bounding Box --------------------

bbox_coords = {"south": 51.2, "north": 52.3, "west": -0.2, "east": 1.5}
essex_bbox = box(bbox_coords["west"], bbox_coords["south"], bbox_coords["east"], bbox_coords["north"])

# Store all unique road numbers before filtering
all_road_numbers = sorted(gdf["Road Number"].unique())

# Apply bounding box filter
gdf = gdf[gdf.intersects(essex_bbox)]

# -------------------- Step 4: Streamlit UI --------------------

st.sidebar.header("Filters")
st.sidebar.markdown("""
<style>
    .sidebar-text {
        font-size: 16px;
        font-weight: bold;
        color: #4A90E2;
    }
    .legend-box {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
    }
    .legend-color {
        width: 15px;
        height: 15px;
        margin-right: 10px;
    }
</style>
""", unsafe_allow_html=True)

# Add Road Number filter
all_roads = st.sidebar.checkbox("Select All Road Numbers", True)
if all_roads:
    selected_roads = all_road_numbers
else:
    selected_roads = st.sidebar.multiselect("Select Road Numbers", all_road_numbers, default=all_road_numbers[:5])

# Add Speed Limit filter
speed_limits = sorted(gdf['speed_limit'].unique())
all_speeds = st.sidebar.checkbox("Select All Speed Limits", True)
if all_speeds:
    selected_speed = speed_limits
else:
    selected_speed = st.sidebar.multiselect("Select Speed Limits", speed_limits, default=speed_limits[:5])

# Add Legend to Sidebar with Toggle
st.sidebar.header("Legend Filters")
st.sidebar.markdown("""
<div class="legend-box"><div class="legend-color" style="background-color: green;"></div> Show Green (KSI Count = 0)</div>
<div class="legend-box"><div class="legend-color" style="background-color: yellow;"></div> Show Yellow (KSI Count 1-3)</div>
<div class="legend-box"><div class="legend-color" style="background-color: orange;"></div> Show Orange (KSI Count 4-7)</div>
<div class="legend-box"><div class="legend-color" style="background-color: red;"></div> Show Red (KSI Count 8+)</div>
""", unsafe_allow_html=True)

show_green = st.sidebar.checkbox("Show Green (KSI Count = 0)", True)
show_yellow = st.sidebar.checkbox("Show Yellow (KSI Count 1-3)", True)
show_orange = st.sidebar.checkbox("Show Orange (KSI Count 4-7)", True)
show_red = st.sidebar.checkbox("Show Red (KSI Count 8+)", True)

def get_color(ksi_count):
    if ksi_count == 0 and show_green:
        return 'green'
    elif 1 <= ksi_count <= 3 and show_yellow:
        return 'yellow'
    elif 4 <= ksi_count <= 7 and show_orange:
        return 'orange'
    elif ksi_count >= 8 and show_red:
        return 'red'
    return None

# Apply filters
gdf_filtered = gdf[(gdf['Road Number'].isin(selected_roads)) & (gdf['speed_limit'].isin(selected_speed))]
gdf_filtered = gdf_filtered[gdf_filtered['KSI Count'].apply(get_color).notnull()]

# -------------------- Step 5: Create Map --------------------

if not gdf_filtered.empty:
    center = essex_bbox.centroid
    m = folium.Map(location=[center.y, center.x], zoom_start=10, tiles="cartodbpositron")

    folium.GeoJson(
        gdf_filtered.to_json(),
        name='Road Segments',
        style_function=lambda feature: {
            'color': get_color(feature['properties']['KSI Count']),
            'weight': 6,
            'opacity': 0.8
        },
        tooltip=folium.GeoJsonTooltip(
            fields=['Road Number', 'KSI Count', 'speed_limit', 'geometry_length_miles'],
            aliases=['Road Number:', 'KSI Count:', 'Speed Limit:', 'Length (miles):'],
            localize=True
        ),
    ).add_to(m)

    st.markdown("<style>.block-container { padding: 0; margin: 0; }</style>", unsafe_allow_html=True)
    folium_static(m, width=1600, height=800)  # Make the map full-screen width
else:
    st.warning("No data matches the selected filters.")